<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Untagged on some random docs</title>
    <link>https://urbandavebe.github.io/tags/untagged/</link>
    <description>Recent content in Untagged on some random docs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2025 19:23:25 +0100</lastBuildDate>
    <atom:link href="https://urbandavebe.github.io/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arch_compendium</title>
      <link>https://urbandavebe.github.io/posts/arch_compendium/</link>
      <pubDate>Fri, 07 Feb 2025 19:23:25 +0100</pubDate>
      <guid>https://urbandavebe.github.io/posts/arch_compendium/</guid>
      <description>&lt;h1 id=&#34;1-software-development-principles&#34;&gt;1. Software Development Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;solid-object-oriented-design&#34;&gt;SOLID (Object-Oriented Design)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Single Responsibility&lt;/strong&gt;: A class should have one reason to change.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Open/Closed&lt;/strong&gt;: Open for extension, closed for modification.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Liskov Substitution&lt;/strong&gt;: Subtypes must be replaceable with their base types.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interface Segregation&lt;/strong&gt;: Avoid bloated interfaces; split them into smaller ones.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Dependency Inversion&lt;/strong&gt;: Depend on abstractions, not concretions.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dry-dont-repeat-yourself&#34;&gt;DRY (Don’t Repeat Yourself)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Avoid code duplication.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kiss-keep-it-simple-stupid&#34;&gt;KISS (Keep It Simple, Stupid)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Simplicity over complexity.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;yagni-you-aint-gonna-need-it&#34;&gt;YAGNI (You Ain’t Gonna Need It)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Don’t add functionality until necessary.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;grasp-general-responsibility-assignment&#34;&gt;GRASP (General Responsibility Assignment)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Patterns like Creator, Controller, Low Coupling, etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;2-software-architecture-principles&#34;&gt;2. Software Architecture Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cqrs-command-query-responsibility-segregation&#34;&gt;CQRS (Command Query Responsibility Segregation)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Separate read and write operations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;event-sourcing&#34;&gt;Event Sourcing&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Store state changes as events.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hexagonalports--adapters&#34;&gt;Hexagonal/Ports &amp;amp; Adapters&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Decouple core logic from external systems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;twelve-factor-app&#34;&gt;Twelve-Factor App&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Principles for cloud-native apps (e.g., config in environment, stateless processes).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;restful-principles&#34;&gt;RESTful Principles&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Statelessness, uniform interface, cacheability.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;3-enterprise-architecture-frameworks&#34;&gt;3. Enterprise Architecture Frameworks&lt;/h1&gt;&#xA;&lt;h2 id=&#34;togaf&#34;&gt;TOGAF&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A methodology for enterprise architecture design.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;zachman-framework&#34;&gt;Zachman Framework&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A matrix for organizing architectural artifacts.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;feaf&#34;&gt;FEAF&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;U.S. Federal Enterprise Architecture Framework.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;soa-principles-service-oriented-architecture&#34;&gt;SOA Principles (Service-Oriented Architecture)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Loose coupling, service contracts, reusability, composability.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;microservices-principles&#34;&gt;Microservices Principles&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Decentralized data, bounded contexts, infrastructure automation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;4-database-principles&#34;&gt;4. Database Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;acid-transactions&#34;&gt;ACID (Transactions)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: All-or-nothing execution.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Valid state transitions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: Concurrent transactions don’t interfere.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: Committed data survives failures.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cap-theorem&#34;&gt;CAP Theorem&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Trade-offs between &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Availability&lt;/strong&gt;, and &lt;strong&gt;Partition tolerance&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;base-nosql&#34;&gt;BASE (NoSQL)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Basically Available&lt;/strong&gt;, &lt;strong&gt;Soft state&lt;/strong&gt;, &lt;strong&gt;Eventual consistency&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;5-devops--infrastructure&#34;&gt;5. DevOps &amp;amp; Infrastructure&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cicd-continuous-integrationdeployment&#34;&gt;CI/CD (Continuous Integration/Deployment)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Automate testing and delivery.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;infrastructure-as-code-iac&#34;&gt;Infrastructure as Code (IaC)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Manage infrastructure via code (e.g., Terraform).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;immutable-infrastructure&#34;&gt;Immutable Infrastructure&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Replace servers instead of modifying them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;6-security-principles&#34;&gt;6. Security Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;least-privilege&#34;&gt;Least Privilege&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Minimal access rights for users/systems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;defense-in-depth&#34;&gt;Defense in Depth&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multiple layers of security.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;zero-trust&#34;&gt;Zero Trust&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Verify explicitly, assume breach.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;7-distributed-systems--cloud&#34;&gt;7. Distributed Systems &amp;amp; Cloud&lt;/h1&gt;&#xA;&lt;h2 id=&#34;fallacies-of-distributed-computing&#34;&gt;Fallacies of Distributed Computing&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assumptions to avoid (e.g., &amp;ldquo;The network is reliable&amp;rdquo;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;design-for-failure&#34;&gt;Design for Failure&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assume components will fail (e.g., Netflix Chaos Monkey).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;8-agile--process-principles&#34;&gt;8. Agile &amp;amp; Process Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;agile-manifesto&#34;&gt;Agile Manifesto&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Individuals over processes, working software over documentation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;iterative-development&#34;&gt;Iterative Development&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Deliver incrementally.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
