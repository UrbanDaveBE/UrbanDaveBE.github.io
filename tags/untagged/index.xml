<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Untagged on some random docs</title>
    <link>https://urbandavebe.github.io/tags/untagged/</link>
    <description>Recent content in Untagged on some random docs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Mar 2025 09:15:26 +0100</lastBuildDate>
    <atom:link href="https://urbandavebe.github.io/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kapitel34</title>
      <link>https://urbandavebe.github.io/posts/kapitel34/</link>
      <pubDate>Fri, 07 Mar 2025 09:15:26 +0100</pubDate>
      <guid>https://urbandavebe.github.io/posts/kapitel34/</guid>
      <description>&lt;h2 id=&#34;21-analyse-der-strategischen-ausgangslage&#34;&gt;2.1 Analyse der strategischen Ausgangslage&lt;/h2&gt;&#xA;&lt;h3 id=&#34;211-bisherige-entwicklung&#34;&gt;2.1.1 Bisherige Entwicklung&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bisherige Entwicklung des unternehmens ermitteln&lt;/li&gt;&#xA;&lt;li&gt;auf strategisch relevante Sachverhalte konzentrieren&lt;/li&gt;&#xA;&lt;li&gt;daraus Hinweise auf die Qualität&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;34-strategische-frühaufklärung-competitive-intelligence&#34;&gt;3.4 Strategische Frühaufklärung (Competitive Intelligence)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Aussagekräfte &amp;amp; zukunftsorientierte Informationen sind für ein wirksames Strategisches Management wichtig.&lt;/li&gt;&#xA;&lt;li&gt;Informationen erst im Hinblick auf Strategieseminar bereitzustellen reicht nicht aus.&lt;/li&gt;&#xA;&lt;li&gt;Beschaffung und Aufbereitung der Informationen ist vielmehr ein kontinuierlicher Prozess (= strategische Frühaufklärung / Competitive Intelligence / Strategic Foresight)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;zeit-als-erfolgsfaktor&#34;&gt;Zeit als Erfolgsfaktor&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;gem. General Electric &amp;ldquo;einen Weg, um Zeit zu kaufen und um Gefahren aufzuspüren, bevor sie unhandhabbar werden und um die Gelegenheit zu erfassen, bevor sie verloren sind.&lt;/li&gt;&#xA;&lt;li&gt;Ziel besteht darin, Chancen und Gefahren frühzeitig zu erkennen mit der Absicht, das Unternehmen vor Krisen zu schützen.&lt;/li&gt;&#xA;&lt;li&gt;Zeitdruck schränkt die Handlungsmöglichkeiten und Aktionsräume zunehmen ein.&lt;/li&gt;&#xA;&lt;li&gt;krisenselten auf einzelne Ereignisse zurückführen.&lt;/li&gt;&#xA;&lt;li&gt;Viel mehr Resultat einer Entwicklung, früh durch schwache Signale angekündigt.&lt;/li&gt;&#xA;&lt;li&gt;Vernünftiger aufgrund vager Informationen frühzeitig zu handeln, als auf sichere Infos zu warten.&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Je später eine Reaktion erfolgt, desto eingeschränkter ist normalerweise die Handlungs- und die Manövrierfähigkeit (Abbildung 3.19)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://urbandavebe.github.io/images/abb319.png&#34; alt=&#34;Abbildung 3.19&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solid</title>
      <link>https://urbandavebe.github.io/posts/solid/</link>
      <pubDate>Sat, 08 Feb 2025 12:35:44 +0100</pubDate>
      <guid>https://urbandavebe.github.io/posts/solid/</guid>
      <description>&lt;h1 id=&#34;solid-principles-object-oriented-design&#34;&gt;SOLID Principles (Object-Oriented Design)&lt;/h1&gt;&#xA;&lt;p&gt;SOLID ist ein Akronym für fünf Prinzipien, die dabei helfen, sauberen, wartbaren und erweiterbaren Code zu schreiben. Diese Prinzipien sind besonders nützlich in der objektorientierten Programmierung (OOP).&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-single-responsibility-principle-srp&#34;&gt;1. Single Responsibility Principle (SRP)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;was&#34;&gt;&lt;strong&gt;Was?&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Eine Klasse sollte &lt;strong&gt;nur eine Aufgabe&lt;/strong&gt; haben.&lt;/li&gt;&#xA;&lt;li&gt;Es sollte &lt;strong&gt;nur einen Grund geben&lt;/strong&gt;, die Klasse zu ändern.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;warum&#34;&gt;&lt;strong&gt;Warum?&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Wartbarkeit&lt;/strong&gt;: Änderungen an einer Aufgabe beeinflussen nicht andere Teile des Systems.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Testbarkeit&lt;/strong&gt;: Klassen mit einer einzigen Verantwortung sind einfacher zu testen.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;beispiel&#34;&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;falsch&#34;&gt;Falsch:&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Report&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_report&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generating report...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save_report&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Saving report...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;richtig&#34;&gt;Richtig:&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReportGenerator&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_report&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generating report...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReportSaver&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save_report&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Saving report...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-openclosed-principle-ocp&#34;&gt;2. Open/Closed Principle (OCP)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;was-1&#34;&gt;Was?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Klassen sollten &lt;strong&gt;offen für Erweiterungen&lt;/strong&gt;, aber &lt;strong&gt;geschlossen für Modifikationen&lt;/strong&gt; sein.&lt;/li&gt;&#xA;&lt;li&gt;Neue Funktionalität sollte durch &lt;strong&gt;Hinzufügen von neuem Code&lt;/strong&gt; (z. B. neue Klassen) erreicht werden, nicht durch Ändern von bestehendem Code.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;warum-1&#34;&gt;Warum?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Stabilität:&lt;/strong&gt; Bestehender Code bleibt unverändert und funktioniert weiterhin.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Erweiterbarkeit:&lt;/strong&gt; Neue Anforderungen können leicht umgesetzt werden.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;beispiel-1&#34;&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;falsch-1&#34;&gt;Falsch:&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AreaCalculator&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_area&lt;/span&gt;(self, shape):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; shape &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;circle&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; radius &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; radius&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; shape &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;square&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; side &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; side&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Bei jeder neuen Form muss die Methode calculate_area geändert werden.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shape&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Circle&lt;/span&gt;(Shape):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;radius &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;radius&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Square&lt;/span&gt;(Shape):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;side &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;side&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Neue Formen können durch Erben von Shape hinzugefügt werden, ohne AreaCalculator zu ändern.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-liskov-substitution-principle-lsp&#34;&gt;3. Liskov Substitution Principle (LSP)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;was-2&#34;&gt;Was?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Kindklassen&lt;/strong&gt; sollten &lt;strong&gt;ohne Probleme&lt;/strong&gt; anstelle ihrer &lt;strong&gt;Elternklassen&lt;/strong&gt; verwendet werden können.&#xA;Das Verhalten der Kindklasse sollte das der Elternklasse &lt;strong&gt;nicht verletzen.&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;warum-2&#34;&gt;Warum?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Polymorphismus:&lt;/strong&gt; Ermöglicht die Verwendung von Subklassen, ohne das System zu brechen.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Vorhersagbarkeit:&lt;/strong&gt; Das Verhalten bleibt konsistent.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;beispiel-2&#34;&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;falsch-2&#34;&gt;Falsch:&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bird&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fly&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flying...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ostrich&lt;/span&gt;(Bird):  &lt;span style=&#34;color:#75715e&#34;&gt;# Strauß kann nicht fliegen!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fly&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ostriches can&amp;#39;t fly!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Die Klasse &lt;strong&gt;Ostrich&lt;/strong&gt; verletzt das Verhalten der Elternklasse &lt;strong&gt;Bird&lt;/strong&gt;, da sie nicht fliegen kann.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bird&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FlyingBird&lt;/span&gt;(Bird):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fly&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flying...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ostrich&lt;/span&gt;(Bird):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Hier wird die Hierarchie verbessert: FlyingBird erbt von Bird und implementiert fly, während Ostrich einfach nur ein Bird ist, der nicht fliegen kann.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-interface-segregation-principle-isp&#34;&gt;3. Interface Segregation Principle (ISP)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;was-3&#34;&gt;Was?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interfaces&lt;/strong&gt; sollten &lt;strong&gt;klein und spezialisiert&lt;/strong&gt; sein, nicht groß und allgemein.&lt;/li&gt;&#xA;&lt;li&gt;Klassen sollten nicht gezwungen werden, Methoden zu implementieren, die sie nicht brauchen.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;warum-3&#34;&gt;Warum?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flexibilität:&lt;/strong&gt; Klassen implementieren nur das, was sie wirklich benötigen.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Wartbarkeit:&lt;/strong&gt; Änderungen an einem Interface betreffen nur die Klassen, die es tatsächlich verwenden.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;beispiel-3&#34;&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;falsch-3&#34;&gt;Falsch:&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Printer&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scan&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fax&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimplePrinter&lt;/span&gt;(Printer):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Printing...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scan&lt;/span&gt;(self):  &lt;span style=&#34;color:#75715e&#34;&gt;# Wird nicht benötigt!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SimplePrinter can&amp;#39;t scan!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fax&lt;/span&gt;(self):  &lt;span style=&#34;color:#75715e&#34;&gt;# Wird nicht benötigt!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SimplePrinter can&amp;#39;t fax!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;SimplePrinter muss unnötige Methoden implementieren.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Printer&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Scanner&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scan&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FaxMachine&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fax&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimplePrinter&lt;/span&gt;(Printer):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Printing...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Die Interfaces sind aufgeteilt: SimplePrinter implementiert nur Printer.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dependency-inversion-principle-dip&#34;&gt;Dependency Inversion Principle (DIP)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;was-4&#34;&gt;Was?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Abhängigkeiten&lt;/strong&gt; sollten auf &lt;strong&gt;Abstraktionen&lt;/strong&gt; basieren, nicht auf konkreten Implementierungen.&lt;/li&gt;&#xA;&lt;li&gt;High-Level-Module sollten nicht von Low-Level-Modulen abhängen, sondern beide sollten von Abstraktionen abhängen.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;warum-4&#34;&gt;Warum?&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flexibilität:&lt;/strong&gt; Einfacherer Austausch von Komponenten.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Testbarkeit:&lt;/strong&gt; Abhängigkeiten können leicht gemockt werden.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;beispiel-4&#34;&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;falsch-4&#34;&gt;Falsch:&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightBulb&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turn_on&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LightBulb: On&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Switch&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bulb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LightBulb()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operate&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bulb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;turn_on()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Switch hängt direkt von der konkreten Klasse LightBulb ab.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SwitchableDevice&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turn_on&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightBulb&lt;/span&gt;(SwitchableDevice):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turn_on&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LightBulb: On&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Switch&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, device: SwitchableDevice):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;device &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; device&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operate&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;device&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;turn_on()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Switch hängt von der Abstraktion SwitchableDevice ab, nicht von LightBulb.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Arch_compendium</title>
      <link>https://urbandavebe.github.io/posts/arch_compendium/</link>
      <pubDate>Fri, 07 Feb 2025 19:23:25 +0100</pubDate>
      <guid>https://urbandavebe.github.io/posts/arch_compendium/</guid>
      <description>&lt;h1 id=&#34;1-software-development-principles&#34;&gt;1. Software Development Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;solid-object-oriented-design&#34;&gt;SOLID (Object-Oriented Design)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Single Responsibility&lt;/strong&gt;: A class should have one reason to change.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Open/Closed&lt;/strong&gt;: Open for extension, closed for modification.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Liskov Substitution&lt;/strong&gt;: Subtypes must be replaceable with their base types.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interface Segregation&lt;/strong&gt;: Avoid bloated interfaces; split them into smaller ones.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Dependency Inversion&lt;/strong&gt;: Depend on abstractions, not concretions.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dry-dont-repeat-yourself&#34;&gt;DRY (Don’t Repeat Yourself)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Avoid code duplication.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kiss-keep-it-simple-stupid&#34;&gt;KISS (Keep It Simple, Stupid)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Simplicity over complexity.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;yagni-you-aint-gonna-need-it&#34;&gt;YAGNI (You Ain’t Gonna Need It)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Don’t add functionality until necessary.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;grasp-general-responsibility-assignment&#34;&gt;GRASP (General Responsibility Assignment)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Patterns like Creator, Controller, Low Coupling, etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;2-software-architecture-principles&#34;&gt;2. Software Architecture Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cqrs-command-query-responsibility-segregation&#34;&gt;CQRS (Command Query Responsibility Segregation)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Separate read and write operations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;event-sourcing&#34;&gt;Event Sourcing&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Store state changes as events.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hexagonalports--adapters&#34;&gt;Hexagonal/Ports &amp;amp; Adapters&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Decouple core logic from external systems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;twelve-factor-app&#34;&gt;Twelve-Factor App&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Principles for cloud-native apps (e.g., config in environment, stateless processes).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;restful-principles&#34;&gt;RESTful Principles&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Statelessness, uniform interface, cacheability.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;3-enterprise-architecture-frameworks&#34;&gt;3. Enterprise Architecture Frameworks&lt;/h1&gt;&#xA;&lt;h2 id=&#34;togaf&#34;&gt;TOGAF&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A methodology for enterprise architecture design.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;zachman-framework&#34;&gt;Zachman Framework&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A matrix for organizing architectural artifacts.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;feaf&#34;&gt;FEAF&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;U.S. Federal Enterprise Architecture Framework.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;soa-principles-service-oriented-architecture&#34;&gt;SOA Principles (Service-Oriented Architecture)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Loose coupling, service contracts, reusability, composability.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;microservices-principles&#34;&gt;Microservices Principles&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Decentralized data, bounded contexts, infrastructure automation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;4-database-principles&#34;&gt;4. Database Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;acid-transactions&#34;&gt;ACID (Transactions)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: All-or-nothing execution.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Valid state transitions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: Concurrent transactions don’t interfere.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: Committed data survives failures.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cap-theorem&#34;&gt;CAP Theorem&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Trade-offs between &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Availability&lt;/strong&gt;, and &lt;strong&gt;Partition tolerance&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;base-nosql&#34;&gt;BASE (NoSQL)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Basically Available&lt;/strong&gt;, &lt;strong&gt;Soft state&lt;/strong&gt;, &lt;strong&gt;Eventual consistency&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;5-devops--infrastructure&#34;&gt;5. DevOps &amp;amp; Infrastructure&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cicd-continuous-integrationdeployment&#34;&gt;CI/CD (Continuous Integration/Deployment)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Automate testing and delivery.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;infrastructure-as-code-iac&#34;&gt;Infrastructure as Code (IaC)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Manage infrastructure via code (e.g., Terraform).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;immutable-infrastructure&#34;&gt;Immutable Infrastructure&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Replace servers instead of modifying them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;6-security-principles&#34;&gt;6. Security Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;least-privilege&#34;&gt;Least Privilege&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Minimal access rights for users/systems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;defense-in-depth&#34;&gt;Defense in Depth&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multiple layers of security.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;zero-trust&#34;&gt;Zero Trust&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Verify explicitly, assume breach.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;7-distributed-systems--cloud&#34;&gt;7. Distributed Systems &amp;amp; Cloud&lt;/h1&gt;&#xA;&lt;h2 id=&#34;fallacies-of-distributed-computing&#34;&gt;Fallacies of Distributed Computing&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assumptions to avoid (e.g., &amp;ldquo;The network is reliable&amp;rdquo;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;design-for-failure&#34;&gt;Design for Failure&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assume components will fail (e.g., Netflix Chaos Monkey).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;8-agile--process-principles&#34;&gt;8. Agile &amp;amp; Process Principles&lt;/h1&gt;&#xA;&lt;h2 id=&#34;agile-manifesto&#34;&gt;Agile Manifesto&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Individuals over processes, working software over documentation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;iterative-development&#34;&gt;Iterative Development&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Deliver incrementally.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
